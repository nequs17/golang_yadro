package main

//go:generate mockgen -destination=mock_foo.go -package=generate . Doer
type Doer interface {
	DoSomething(int, string) error
}

/*
//////////////1/////////////////////

package main

func main() {
	a := 1
	b := 2
	if true {
		add(a, b)
	}
}
func add(a, b int) {
	println(a + b)
}


///////////////////////////////////

GOSSAFUNC=main go tool compile ./main.go > ssa.html

//////////////2/////////////////////

main.go:
//go:build pro
// +build pro

package main

func init() {
	features = append(features,
		"Pro Feature #1",
		"Pro Feature #2",
	)
}


pro.txt

package main

import "fmt"

var features = []string{
	"Free Feature #1",
	"Free Feature #2",
}

func main() {
	for _, f := range features {
		fmt.Println(">", f)
	}
}

////////////////////////////////

nqs_17@DESKTOP-LRG51H3:/mnt/d/goland_curses/4$ go build -tags pro
nqs_17@DESKTOP-LRG51H3:/mnt/d/goland_curses/4$ ./4
> Free Feature #1
> Free Feature #2
> Pro Feature #1
> Pro Feature #2



//////////////3/////////////////////

package main

//go:generate mockgen -destination=mock_foo.go -package=generate . Doer
type Doer interface {
	DoSomething(int, string) error
}

///////////////////////////////////

// Code generated by MockGen. DO NOT EDIT.
// Source: generate (interfaces: Doer)

// Package generate is a generated GoMock package.
package generate

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDoer is a mock of Doer interface.
type MockDoer struct {
	ctrl     *gomock.Controller
	recorder *MockDoerMockRecorder
}

// MockDoerMockRecorder is the mock recorder for MockDoer.
type MockDoerMockRecorder struct {
	mock *MockDoer
}

// NewMockDoer creates a new mock instance.
func NewMockDoer(ctrl *gomock.Controller) *MockDoer {
	mock := &MockDoer{ctrl: ctrl}
	mock.recorder = &MockDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoer) EXPECT() *MockDoerMockRecorder {
	return m.recorder
}

// DoSomething mocks base method.
func (m *MockDoer) DoSomething(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoSomething", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoSomething indicates an expected call of DoSomething.
func (mr *MockDoerMockRecorder) DoSomething(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSomething", reflect.TypeOf((*MockDoer)(nil).DoSomething), arg0, arg1)
}




//////////////4/////////////////////

package main

import (
	"embed"
)

//go:embed folder/single_file.txt
var fileString string

//go:embed folder/single_file.txt
var fileByte []byte

//go:embed folder/*.hash
var folder embed.FS

func main() {
	println(fileString)
	println(string(fileByte))
	content1, _ :=
		folder.ReadFile("folder/file1.hash")
	println(string(content1))
	content2, _ :=
		folder.ReadFile("folder/file2.hash")
	println(string(content2))
}


///////////////////////////////////
before walk main
.   DCL # main.go:4:2
.   .   NAME-main.a esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:4:2
.   AS Def tc(1) # main.go:4:4
.   .   NAME-main.a esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:4:2
.   .   LITERAL-1 int tc(1) # main.go:4:7
.   DCL # main.go:5:2
.   .   NAME-main.b esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:5:2
.   AS Def tc(1) # main.go:5:4
.   .   NAME-main.b esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:5:2
.   .   LITERAL-2 int tc(1) # main.go:5:7
.   DCL # main.go:7:6
.   .   NAME-main.a esc(no) Class:PAUTO Offset:0 InlFormal OnStack Used int tc(1) # main.go:7:6 main.go:10:
10
.   DCL # main.go:7:6
.   .   NAME-main.b esc(no) Class:PAUTO Offset:0 InlFormal OnStack Used int tc(1) # main.go:7:6 main.go:10:
13
.   AS2 Def tc(1) # main.go:7:6
.   AS2-Lhs
.   .   NAME-main.a esc(no) Class:PAUTO Offset:0 InlFormal OnStack Used int tc(1) # main.go:7:6 main.go:10:
10
.   .   NAME-main.b esc(no) Class:PAUTO Offset:0 InlFormal OnStack Used int tc(1) # main.go:7:6 main.go:10:
13
.   AS2-Rhs
.   .   NAME-main.a esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:4:2
.   .   NAME-main.b esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:5:2
.   INLMARK # +main.go:7:6
.   PRINTN tc(1) # main.go:7:6 main.go:11:9
.   PRINTN-Args
.   .   ADD int tc(1) # main.go:7:6 main.go:11:12
.   .   .   NAME-main.a esc(no) Class:PAUTO Offset:0 InlFormal OnStack Used int tc(1) # main.go:7:6 main.go
:10:10
.   .   .   NAME-main.b esc(no) Class:PAUTO Offset:0 InlFormal OnStack Used int tc(1) # main.go:7:6 main.go
:10:13
.   LABEL main..i0 # main.go:7:6
after walk main
.   DCL # main.go:4:2
.   .   NAME-main.a esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:4:2
.   AS Def tc(1) # main.go:4:4
.   .   NAME-main.a esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:4:2
.   .   LITERAL-1 int tc(1) # main.go:4:7
.   DCL # main.go:5:2
.   .   NAME-main.b esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:5:2
.   AS Def tc(1) # main.go:5:4
.   .   NAME-main.b esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:5:2
.   .   LITERAL-2 int tc(1) # main.go:5:7
.   DCL # main.go:7:6
.   .   NAME-main.a esc(no) Class:PAUTO Offset:0 InlFormal OnStack Used int tc(1) # main.go:7:6 main.go:10:
10
.   DCL # main.go:7:6
.   .   NAME-main.b esc(no) Class:PAUTO Offset:0 InlFormal OnStack Used int tc(1) # main.go:7:6 main.go:10:
13
.   BLOCK # main.go:7:6
.   BLOCK-List
.   .   AS tc(1) # main.go:7:6
.   .   .   NAME-main.a esc(no) Class:PAUTO Offset:0 InlFormal OnStack Used int tc(1) # main.go:7:6 main.go
:10:10
.   .   .   NAME-main.a esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:4:2
.   .   AS tc(1) # main.go:7:6
.   .   .   NAME-main.b esc(no) Class:PAUTO Offset:0 InlFormal OnStack Used int tc(1) # main.go:7:6 main.go
:10:13
.   .   .   NAME-main.b esc(no) Class:PAUTO Offset:0 OnStack Used int tc(1) # main.go:5:2
.   INLMARK # +main.go:7:6
.   BLOCK-init
.   .   AS tc(1) # main.go:7:6 main.go:11:9
.   .   .   NAME-main..autotmp_4 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used int tc(1) # main.go:7:6
main.go:11:9
.   .   .   ADD int tc(1) # main.go:7:6 main.go:11:12
.   .   .   .   NAME-main.a esc(no) Class:PAUTO Offset:0 InlFormal OnStack Used int tc(1) # main.go:7:6 mai
n.go:10:10
.   .   .   .   NAME-main.b esc(no) Class:PAUTO Offset:0 InlFormal OnStack Used int tc(1) # main.go:7:6 mai
n.go:10:13
.   BLOCK tc(1) # main.go:7:6 main.go:11:9
.   BLOCK-List
.   .   CALLFUNC Walked tc(1) # main.go:7:6 main.go:11:9
.   .   CALLFUNC-Fun
.   .   .   NAME-runtime.printlock Class:PFUNC Offset:0 Used FUNC-func() tc(1)
.   .   CALLFUNC Walked tc(1) # main.go:7:6 main.go:11:9
.   .   CALLFUNC-Fun
.   .   .   NAME-runtime.printint Class:PFUNC Offset:0 Used FUNC-func(int64) tc(1)
.   .   CALLFUNC-Args
.   .   .   CONVNOP int64 tc(1) # main.go:7:6 main.go:11:9
.   .   .   .   NAME-main..autotmp_4 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used int tc(1) # main.go:
7:6 main.go:11:9
.   .   CALLFUNC Walked tc(1) # main.go:7:6 main.go:11:9
.   .   CALLFUNC-Fun
.   .   .   NAME-runtime.printnl Class:PFUNC Offset:0 Used FUNC-func() tc(1)
.   .   CALLFUNC Walked tc(1) # main.go:7:6 main.go:11:9
.   .   CALLFUNC-Fun
.   .   .   NAME-runtime.printunlock Class:PFUNC Offset:0 Used FUNC-func() tc(1)
.   LABEL main..i0 # main.go:7:6

before walk add
.   PRINTN tc(1) # main.go:11:9
.   PRINTN-Args
.   .   ADD int tc(1) # main.go:11:12
.   .   .   NAME-main.a esc(no) Class:PPARAM Offset:0 OnStack Used int tc(1) # main.go:10:10
.   .   .   NAME-main.b esc(no) Class:PPARAM Offset:0 OnStack Used int tc(1) # main.go:10:13
after walk add
.   BLOCK-init
.   .   AS tc(1) # main.go:11:9
.   .   .   NAME-main..autotmp_2 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used int tc(1) # main.go:11:9
.   .   .   ADD int tc(1) # main.go:11:12
.   .   .   .   NAME-main.a esc(no) Class:PPARAM Offset:0 OnStack Used int tc(1) # main.go:10:10
.   .   .   .   NAME-main.b esc(no) Class:PPARAM Offset:0 OnStack Used int tc(1) # main.go:10:13
.   BLOCK tc(1) # main.go:11:9
.   BLOCK-List
.   .   CALLFUNC Walked tc(1) # main.go:11:9
.   .   CALLFUNC-Fun
.   .   .   NAME-runtime.printlock Class:PFUNC Offset:0 Used FUNC-func() tc(1)
.   .   CALLFUNC Walked tc(1) # main.go:11:9
.   .   CALLFUNC-Fun
.   .   .   NAME-runtime.printint Class:PFUNC Offset:0 Used FUNC-func(int64) tc(1)
.   .   CALLFUNC-Args
.   .   .   .   NAME-main..autotmp_2 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used int tc(1) # main.go:
11:9
.   .   CALLFUNC Walked tc(1) # main.go:11:9
.   .   CALLFUNC-Fun
.   .   .   NAME-runtime.printnl Class:PFUNC Offset:0 Used FUNC-func() tc(1)
.   .   CALLFUNC Walked tc(1) # main.go:11:9
.   .   CALLFUNC-Fun
.   .   .   NAME-runtime.printunlock Class:PFUNC Offset:0 Used FUNC-func() tc(1)

*/
